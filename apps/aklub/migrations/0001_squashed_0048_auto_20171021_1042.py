# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-07 18:12
from __future__ import unicode_literals

import aklub.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import stdimage.models

from .data_migration.old_user_profile_model_hack import Settings as settings

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# aklub.migrations.0007_auto_20150902_1223
# aklub.migrations.0010_auto_20150730_1510
# aklub.migrations.0024_auto_20160625_1242
# aklub.migrations.0034_auto_20160811_1349
# aklub.migrations.0041_auto_tax_confirmation_userprofile
# aklub.migrations.0046_auto_20171020_1510

class Migration(migrations.Migration):

    replaces = [('aklub', '0001_initial'), ('aklub', '0002_auto_20141128_1225'), ('aklub', '0003_auto_20141128_1510'), ('aklub', '0004_auto_20150311_1442'), ('aklub', '0005_auto_20150730_1424'), ('aklub', '0006_auto_20150902_1230'), ('aklub', '0009_auto_20150731_1454'), ('aklub', '0010_auto_20150730_1510'), ('aklub', '0011_auto_20150803_1731'), ('aklub', '0007_auto_20150902_1223'), ('aklub', '0008_auto_20150902_1242'), ('aklub', '0012_merge'), ('aklub', '0013_auto_20150929_1209'), ('aklub', '0014_auto_20150929_1328'), ('aklub', '0015_auto_20151016_1636'), ('aklub', '0016_auto_20151211_1511'), ('aklub', '0017_auto_20160127_1358'), ('aklub', '0018_auto_20160131_1341'), ('aklub', '0019_auto_20160206_1208'), ('aklub', '0020_auto_20160529_1514'), ('aklub', '0021_auto_20160623_1801'), ('aklub', '0022_auto_20160623_1837'), ('aklub', '0023_auto_20160625_1242'), ('aklub', '0024_auto_20160625_1242'), ('aklub', '0025_auto_20160628_1438'), ('aklub', '0026_auto_20160722_1731'), ('aklub', '0027_campaign_darujme_name'), ('aklub', '0028_auto_20160728_1228'), ('aklub', '0029_auto_20160731_1117'), ('aklub', '0030_auto_20160809_1112'), ('aklub', '0031_auto_20160809_1645'), ('aklub', '0032_auto_20160810_1459'), ('aklub', '0033_auto_20160811_1144'), ('aklub', '0034_auto_20160811_1349'), ('aklub', '0035_auto_20160916_1514'), ('aklub', '0036_auto_20160917_1001'), ('aklub', '0037_auto_20161107_1343'), ('aklub', '0038_auto_20161122_1551'), ('aklub', '0039_auto_20161221_1256'), ('aklub', '0040_auto_20170117_1325'), ('aklub', '0041_auto_tax_confirmation_userprofile'), ('aklub', '0042_auto_20170117_1336'), ('aklub', '0043_auto_20170612_1242'), ('aklub', '0044_campaign_darujme_project_id'), ('aklub', '0045_auto_20171020_1506'), ('aklub', '0046_auto_20171020_1510'), ('aklub', '0047_auto_20171020_1814'), ('aklub', '0048_auto_20171021_1042')]

    initial = True

    dependencies = [
        ('auth', '0011_auto_20171018_1037'),
        ('auth', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address', blank=True, null=True)),
                ('title_after', models.CharField(blank=True, max_length=15, verbose_name='Title after name')),
                ('title_before', models.CharField(blank=True, max_length=15, verbose_name='Title before name')),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('unknown', 'Unknown')], max_length=50, verbose_name='Gender')),
                ('addressment', models.CharField(blank=True, max_length=40, verbose_name='Addressment in letter')),
                ('addressment_on_envelope', models.CharField(blank=True, max_length=40, verbose_name='Addressment on envelope')),
                ('language', models.CharField(choices=[('cs', 'Czech'), ('en', 'English')], default='cs', help_text='This is the language which will be used to communicate with this user. The system will send emails in this language and administrators will use this language in phone calls and personal contacts.', max_length=50, verbose_name='Language')),
                ('telephone', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator('^[0-9+ ]*$', 'Telephone must consist of numbers, spaces and + sign')], verbose_name='Telephone')),
                ('street', models.CharField(blank=True, max_length=80, verbose_name='Street and number')),
                ('city', models.CharField(blank=True, max_length=40, verbose_name='City/City part')),
                ('country', models.CharField(blank=True, default='Česká republika', max_length=40, verbose_name='Country')),
                ('zip_code', models.TextField(blank=True, verbose_name='ZIP Code')),
                ('different_correspondence_address', models.BooleanField(default=False, help_text='User has different correspondence address', verbose_name='Different correspondence address')),
                ('other_support', models.TextField(blank=True, help_text='If the user supports us in other ways, please specify here.', max_length=500, verbose_name='Other support')),
                ('public', models.BooleanField(default=True, verbose_name='Publish my name in the list of supporters')),
                ('profile_text', models.TextField(blank=True, help_text='Tell others why you support Auto*Mat', max_length=3000, null=True, verbose_name='What is your reason?')),
                ('profile_picture', stdimage.models.StdImageField(blank=True, help_text='Your profile picture, which others will see.', null=True, upload_to='profile-images', verbose_name='Profile picture')),
                ('club_card_available', models.BooleanField(default=False, help_text='Is he entitled to posses a club card?', verbose_name='Club card available')),
                ('club_card_dispatched', models.BooleanField(default=False, help_text='Did we send him the club card already?', verbose_name='Club card dispatched?')),
                ('other_benefits', models.TextField(blank=True, help_text='Did he receive some other benefits?', max_length=500, verbose_name='Other benefits')),
                ('note', models.TextField(blank=True, max_length=2000, verbose_name='Note for making a boring form more lively')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date of creation')),
                ('updated', models.DateTimeField(auto_now=True, null=True, verbose_name='Date of last change')),
            ],
            options={
                'verbose_name': 'User profile',
                'verbose_name_plural': 'User profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountStatements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('account', 'Account statement'), ('darujme', 'Darujme.cz')], max_length=20)),
                ('import_date', models.DateTimeField(auto_now=True)),
                ('csv_file', models.FileField(upload_to='account-statements')),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-import_date'],
                'verbose_name': 'Account Statement',
                'verbose_name_plural': 'Account Statements',
            },
        ),
        migrations.CreateModel(
            name='AutomaticCommunication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True, verbose_name='Name')),
                ('method', models.CharField(choices=[('email', 'Email'), ('phonecall', 'Phonecall'), ('mail', 'Mail'), ('personal', 'Personal'), ('internal', 'Internal')], max_length=30, verbose_name='Method')),
                ('subject', models.CharField(max_length=130, verbose_name='Subject')),
                ('subject_en', models.CharField(blank=True, max_length=130, null=True, verbose_name='English subject')),
                ('template', models.TextField(help_text='Template can contain variable substitutions like addressment, name, variable symbol etc.', max_length=50000, verbose_name='Template')),
                ('template_en', models.TextField(blank=True, max_length=50000, null=True, verbose_name='English template')),
                ('only_once', models.BooleanField(default=True, help_text='If checked, never send this communication twice to one user', verbose_name='Only once')),
                ('dispatch_auto', models.BooleanField(default=False, help_text='If checked, the communication might be dispatched by the system (e.g. an email sent) as soon as condition becomes true, without any further action from the administrator. If not, the communication is created, but the administrator must send it manually.', verbose_name='Dispatch auto')),
            ],
            options={
                'verbose_name': 'Automatic Communication',
                'verbose_name_plural': 'Automatic Communications',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(verbose_name='Created')),
                ('terminated', models.DateField(blank=True, null=True, verbose_name='Terminated')),
                ('name', models.CharField(blank=True, help_text='Choose some unique name for this campaign', max_length=100, verbose_name='Name')),
                ('darujme_name', models.CharField(blank=True, default=None, max_length=100, null=True, unique=True, verbose_name='Name in Darujme.cz')),
                ('darujme_project_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Darujme.cz project ID')),
                ('darujme_api_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Darujme.cz API ID')),
                ('darujme_api_secret', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Darujme.cz API secret')),
                ('description', models.TextField(blank=True, help_text='Description of this campaign', max_length=3000, verbose_name='Description')),
                ('acquisition_campaign', models.BooleanField(default=False, verbose_name='Acquisition campaign')),
                ('real_yield', models.FloatField(blank=True, help_text='Use if yield differs from counted value', null=True, verbose_name='Real yield')),
                ('slug', models.SlugField(blank=True, default=None, help_text='Identifier of the campaign', max_length=100, null=True, unique=True, verbose_name='Slug')),
                ('allow_statistics', models.BooleanField(default=False, verbose_name='Allow statistics exports')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
        ),
        migrations.CreateModel(
            name='Communication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('email', 'Email'), ('phonecall', 'Phonecall'), ('mail', 'Mail'), ('personal', 'Personal'), ('internal', 'Internal')], max_length=30, verbose_name='Method')),
                ('type', models.CharField(choices=[('mass', 'Mass'), ('auto', 'Automatic'), ('individual', 'Individual')], default='individual', max_length=30, verbose_name='Type of communication')),
                ('date', models.DateTimeField(verbose_name='Date')),
                ('subject', models.CharField(help_text='The topic of this communication', max_length=130, verbose_name='Subject')),
                ('summary', models.TextField(help_text='Text or summary of this communication', max_length=50000, verbose_name='Text')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='communication-attachments', verbose_name='Attachment')),
                ('note', models.TextField(blank=True, help_text='Internal notes about this communication', max_length=3000, verbose_name='Notes')),
                ('send', models.BooleanField(default=False, help_text='Request sending or resolving this communication. For emails, this means that the email will be immediatelly sent to the user. In other types of communications, someone must handle this manually.', verbose_name='Send / Handle')),
                ('dispatched', models.BooleanField(default=False, help_text='Was this message already sent, communicated and/or resolved?', verbose_name='Dispatched / Done')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_by_communication', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('handled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_by_communication', to=settings.AUTH_USER_MODEL, verbose_name='Last handled by')),
            ],
            options={
                'ordering': ['date'],
                'verbose_name': 'Communication',
                'verbose_name_plural': 'Communications',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='Name of condition')),
                ('operation', models.CharField(choices=[('and', 'and'), ('or', 'or'), ('nor', 'nor')], max_length=30, verbose_name='Operation')),
                ('as_filter', models.BooleanField(default=False, help_text='Determines whether this condition is available as a filterin the table of Users', verbose_name='Display as filter?')),
                ('on_dashboard', models.BooleanField(default=False, help_text='Determines whether this condition is available on dashboard', verbose_name='Display on dashboard?')),
                ('conds', models.ManyToManyField(blank=True, related_name='conds_rel', to='aklub.Condition', verbose_name='Conditions')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'Condition',
                'verbose_name_plural': 'Conditions',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='amount')),
                ('item', models.CharField(blank=True, max_length=300, verbose_name='item')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='aklub.Campaign', verbose_name='campaign')),
            ],
            options={
                'verbose_name': 'expense',
                'verbose_name_plural': 'expenses',
            },
        ),
        migrations.CreateModel(
            name='MassCommunication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True, verbose_name='Name')),
                ('date', models.DateField(default=None, verbose_name='Date')),
                ('method', models.CharField(choices=[('email', 'Email'), ('phonecall', 'Phonecall'), ('mail', 'Mail'), ('personal', 'Personal'), ('internal', 'Internal')], max_length=30, verbose_name='Method')),
                ('subject', models.CharField(max_length=130, verbose_name='Subject')),
                ('subject_en', models.CharField(blank=True, help_text='English version of the subject. If empty, English speaking users will not receive this communication.', max_length=130, null=True, verbose_name='English subject')),
                ('template', models.TextField(help_text='Template can contain variable substitutions like addressment, name, variable symbol etc.', max_length=50000, null=True, verbose_name='Template')),
                ('template_en', models.TextField(blank=True, max_length=50000, null=True, verbose_name='English template')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='mass-communication-attachments', verbose_name='Attachment')),
                ('attach_tax_confirmation', models.BooleanField(default=False, help_text='If this field is checked, the tax confirmation for last year is appended to the message.', verbose_name='Attach tax confirmation')),
                ('note', models.TextField(blank=True, help_text='Note', max_length=500, null=True, verbose_name='note')),
            ],
            options={
                'verbose_name': 'Mass Communication',
                'verbose_name_plural': 'Mass Communications',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date of payment')),
                ('amount', models.PositiveIntegerField(help_text='Amount of money in the main used curency', verbose_name='Amount')),
                ('account', models.CharField(blank=True, help_text='Bank account from which money was received', max_length=100, verbose_name='Account')),
                ('bank_code', models.CharField(blank=True, help_text='Code of bank from which money was received', max_length=30, verbose_name='Bank code')),
                ('VS', models.CharField(blank=True, help_text='Variable symbol', max_length=30, null=True, verbose_name='VS')),
                ('SS', models.CharField(blank=True, help_text='Specific symbol', max_length=30, verbose_name='SS')),
                ('KS', models.CharField(blank=True, help_text='Constant symbol', max_length=30, verbose_name='CS')),
                ('BIC', models.CharField(blank=True, help_text='BIC', max_length=30, null=True, verbose_name='BIC')),
                ('user_identification', models.CharField(blank=True, help_text='Sender identification string on the account statement', max_length=50, verbose_name='Sender identification')),
                ('type', models.CharField(blank=True, choices=[('bank-transfer', 'Bank transfer'), ('cash', 'In cash'), ('expected', 'Expected payment'), ('darujme', 'Darujme.cz')], help_text='Type of payment', max_length=200, verbose_name='Type')),
                ('done_by', models.CharField(blank=True, help_text="This is a column imported from the account statements. It's purpose is not clear. It has been usually blank on the account statement we have received so far.", max_length=500, verbose_name='Done by')),
                ('account_name', models.CharField(blank=True, max_length=200, verbose_name='Account name')),
                ('bank_name', models.CharField(blank=True, max_length=500, verbose_name='Bank name')),
                ('transfer_note', models.CharField(blank=True, max_length=200, null=True, verbose_name='Transfer note')),
                ('currency', models.CharField(blank=True, max_length=200, null=True, verbose_name='Currency')),
                ('recipient_message', models.CharField(blank=True, max_length=200, null=True, verbose_name='Recipient message')),
                ('operation_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='Operation ID')),
                ('transfer_type', models.CharField(blank=True, max_length=200, null=True, verbose_name='Transfer type')),
                ('specification', models.CharField(blank=True, max_length=200, null=True, verbose_name='Specification')),
                ('order_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='Order ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date of creation')),
                ('updated', models.DateTimeField(auto_now=True, null=True, verbose_name='Date of last change')),
                ('account_statement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='aklub.AccountStatements')),
            ],
            options={
                'ordering': ['-date'],
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
            },
        ),
        migrations.CreateModel(
            name='Recruiter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered', models.DateField(default=django.utils.timezone.now, verbose_name='Registered')),
                ('recruiter_id', models.PositiveIntegerField(unique=True, verbose_name='Recruiter ID')),
                ('firstname', models.CharField(max_length=40, verbose_name='First name')),
                ('surname', models.CharField(max_length=40, verbose_name='Surname')),
                ('email', models.CharField(blank=True, max_length=40, verbose_name='Email')),
                ('telephone', models.CharField(blank=True, max_length=30, verbose_name='Telephone')),
                ('note', models.TextField(blank=True, max_length=3000, verbose_name='Note')),
                ('problem', models.BooleanField(default=False, help_text='Check this field if there is a problem with this recruiter which only be resolved later or by somebody else. Uncheck as soon as the problem is resolved. If the problem is of permanent nature and no further action is needed, leave it unchecked and lower the rating bellow accordingly.', verbose_name='Problem')),
                ('rating', models.IntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], default=5, help_text='5 = ordinary (modestly good), 0 = hopelessly bad 10 = excelent much above average', verbose_name='Rating')),
                ('campaigns', models.ManyToManyField(blank=True, help_text='Associated campaigns', to='aklub.Campaign')),
            ],
            options={
                'verbose_name': 'Recruiter',
                'verbose_name_plural': 'Recruiters',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of result')),
                ('sort', models.CharField(choices=[('promise', 'Promise'), ('ongoing', 'Ongoing communication'), ('dont_contact', "Don't contact again")], default='individual', max_length=30, verbose_name='Sort of result')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Identifier of the source', max_length=100, verbose_name='Slug')),
                ('name', models.CharField(help_text='Name of the source', max_length=100, verbose_name='Name')),
                ('direct_dialogue', models.BooleanField(default=False, verbose_name='Is from Direct Dialogue')),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
            },
        ),
        migrations.CreateModel(
            name='TaxConfirmation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField()),
                ('amount', models.PositiveIntegerField(default=0)),
                ('file', models.FileField(storage=aklub.models.OverwriteStorage(), upload_to=aklub.models.confirmation_upload_to)),
                ('user_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tax confirmation',
                'verbose_name_plural': 'Tax confirmations',
            },
        ),
        migrations.CreateModel(
            name='TerminalCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variable', models.CharField(blank=True, choices=[('User.date_joined', 'User datum registrace: DateTimeField '), ('User.email', 'User e-mailová adresa: CharField '), ('User.first_name', 'User křestní jméno: CharField '), ('User.id', 'User ID: AutoField '), ('User.is_active', 'User aktivní: BooleanField '), ('User.is_staff', 'User administrační přístup: BooleanField '), ('User.is_superuser', 'User superuživatel: BooleanField '), ('User.last_login', 'User poslední přihlášení: DateTimeField '), ('User.last_name', 'User příjmení: CharField '), ('User.password', 'User heslo: CharField '), ('User.username', 'User uživatelské jméno: CharField '), ('User.last_payment.BIC', 'User.last_payment BIC: CharField '), ('User.last_payment.KS', 'User.last_payment KS: CharField '), ('User.last_payment.SS', 'User.last_payment SS: CharField '), ('User.last_payment.VS', 'User.last_payment VS: CharField '), ('User.last_payment.account', 'User.last_payment Account: CharField '), ('User.last_payment.account_name', 'User.last_payment Jméno účtu: CharField '), ('User.last_payment.account_statement', 'User.last_payment account statement: ForeignKey '), ('User.last_payment.amount', 'User.last_payment Částka: PositiveIntegerField '), ('User.last_payment.bank_code', 'User.last_payment Kód banky: CharField '), ('User.last_payment.bank_name', 'User.last_payment Jméno banky: CharField '), ('User.last_payment.created', 'User.last_payment Datum vytvoření: DateTimeField '), ('User.last_payment.currency', 'User.last_payment Měna: CharField '), ('User.last_payment.date', 'User.last_payment Datum platby: DateField '), ('User.last_payment.done_by', 'User.last_payment Provedl: CharField '), ('User.last_payment.id', 'User.last_payment ID: AutoField '), ('User.last_payment.operation_id', 'User.last_payment ID Operace: CharField '), ('User.last_payment.order_id', 'User.last_payment ID objednávky: CharField '), ('User.last_payment.recipient_message', 'User.last_payment Zpráva pro recipienta: CharField '), ('User.last_payment.specification', 'User.last_payment Specifikace: CharField '), ('User.last_payment.transfer_note', 'User.last_payment Poznámka k převodu: CharField '), ('User.last_payment.transfer_type', 'User.last_payment Typ převodu: CharField '), ('User.last_payment.type', "User.last_payment Typ: CharField ('bank-transfer', 'cash', 'expected', 'darujme')"), ('User.last_payment.updated', 'User.last_payment Datum poslední změny: DateTimeField '), ('User.last_payment.user', 'User.last_payment user: ForeignKey '), ('User.last_payment.user_identification', 'User.last_payment Identifikace odesílatele: CharField '), ('User.source.direct_dialogue', 'User.source Pochází z Direct dialogu: BooleanField '), ('User.source.id', 'User.source ID: AutoField '), ('User.source.name', 'User.source Jméno: CharField '), ('User.source.slug', 'User.source Identifikátor: SlugField '), ('UserInCampaign.activity_points', 'UserInCampaign Body za aktivitu: IntegerField '), ('UserInCampaign.additional_information', 'UserInCampaign Rozšiřující informace: TextField '), ('UserInCampaign.campaign', 'UserInCampaign campaign: ForeignKey '), ('UserInCampaign.end_of_regular_payments', 'UserInCampaign Konec pravidelných plateb (pro platby kartou): DateField '), ('UserInCampaign.exceptional_membership', 'UserInCampaign Výjimečné členství: BooleanField '), ('UserInCampaign.expected_date_of_first_payment', 'UserInCampaign Očekávané datum první platby: DateField '), ('UserInCampaign.expected_regular_payment_date', 'UserInCampaign expected regular payment date: DateField '), ('UserInCampaign.extra_money', 'UserInCampaign extra money: IntegerField '), ('UserInCampaign.field_of_work', 'UserInCampaign Pracovní oblast: CharField '), ('UserInCampaign.id', 'UserInCampaign ID: AutoField '), ('UserInCampaign.knows_us_from', 'UserInCampaign Odkud nás zná?: CharField '), ('UserInCampaign.last_payment', 'UserInCampaign last payment: DenormDBField '), ('UserInCampaign.next_communication_date', 'UserInCampaign Datum příští komunikace komunikace: DateField '), ('UserInCampaign.next_communication_method', "UserInCampaign Metoda příští komunikace: CharField ('email', 'phonecall', 'mail', 'personal', 'internal')"), ('UserInCampaign.no_upgrade', 'UserInCampaign no upgrade: NullBooleanField '), ('UserInCampaign.note', 'UserInCampaign Poznámka pro oživení nudného formuláře: TextField '), ('UserInCampaign.number_of_payments', 'UserInCampaign number of payments: IntegerField '), ('UserInCampaign.old_account', 'UserInCampaign Starý účet: BooleanField '), ('UserInCampaign.other_support', 'UserInCampaign Jiná podpora: TextField '), ('UserInCampaign.payment_total', 'UserInCampaign payment total: FloatField '), ('UserInCampaign.recruiter', 'UserInCampaign recruiter: ForeignKey '), ('UserInCampaign.registered_support', 'UserInCampaign Registrace podpory: DateTimeField '), ('UserInCampaign.regular_amount', 'UserInCampaign Částka pravidelné platby: PositiveIntegerField '), ('UserInCampaign.regular_frequency', "UserInCampaign Frekvence pravidelných plateb: CharField ('monthly', 'quaterly', 'biannually', 'annually', None)"), ('UserInCampaign.regular_payments', "UserInCampaign Pravidelné platby: CharField ('regular', 'onetime', 'promise')"), ('UserInCampaign.source', 'UserInCampaign Zdroj: ForeignKey '), ('UserInCampaign.updated', 'UserInCampaign Datum poslední změny: DateTimeField '), ('UserInCampaign.userprofile', 'UserInCampaign userprofile: ForeignKey '), ('UserInCampaign.variable_symbol', 'UserInCampaign Variabilní symbol: CharField '), ('UserInCampaign.verified', 'UserInCampaign Ověřen: BooleanField '), ('UserInCampaign.verified_by', 'UserInCampaign Ověřil: ForeignKey '), ('UserInCampaign.why_supports', 'UserInCampaign Proč nás podporuje?: TextField '), ('UserInCampaign.wished_information', 'UserInCampaign Zasílat pravidelné informace emailem: BooleanField '), ('UserInCampaign.wished_tax_confirmation', 'UserInCampaign Zaslat daňové potvrzení (na konci roku): BooleanField '), ('UserInCampaign.wished_welcome_letter', 'UserInCampaign Odeslat uvítací dopis s členskou kartou: BooleanField '), ('UserProfile.addressment', 'UserProfile Oslovení v dopise: CharField '), ('UserProfile.addressment_on_envelope', 'UserProfile Oslovení na obálku: CharField '), ('UserProfile.city', 'UserProfile Město/Městská část: CharField '), ('UserProfile.club_card_available', 'UserProfile Nárok na klubovou kartu: BooleanField '), ('UserProfile.club_card_dispatched', 'UserProfile Klubová karta odeslána?: BooleanField '), ('UserProfile.country', 'UserProfile Země: CharField '), ('UserProfile.created', 'UserProfile Datum vytvoření: DateTimeField '), ('UserProfile.date_joined', 'UserProfile datum registrace: DateTimeField '), ('UserProfile.different_correspondence_address', 'UserProfile Jiná korespondenční adresa: BooleanField '), ('UserProfile.email', 'UserProfile e-mailová adresa: CharField '), ('UserProfile.first_name', 'UserProfile křestní jméno: CharField '), ('UserProfile.id', 'UserProfile ID: AutoField '), ('UserProfile.is_active', 'UserProfile aktivní: BooleanField '), ('UserProfile.is_staff', 'UserProfile administrační přístup: BooleanField '), ('UserProfile.is_superuser', 'UserProfile superuživatel: BooleanField '), ('UserProfile.language', "UserProfile Jazyk: CharField ('cs', 'en')"), ('UserProfile.last_login', 'UserProfile poslední přihlášení: DateTimeField '), ('UserProfile.last_name', 'UserProfile příjmení: CharField '), ('UserProfile.note', 'UserProfile Poznámka pro oživení nudného formuláře: TextField '), ('UserProfile.other_benefits', 'UserProfile Další benefity: TextField '), ('UserProfile.other_support', 'UserProfile Jiná podpora: TextField '), ('UserProfile.password', 'UserProfile heslo: CharField '), ('UserProfile.profile_picture', 'UserProfile Profilová fotografie: FileField '), ('UserProfile.profile_text', 'UserProfile A jaký je Tvůj důvod?: TextField '), ('UserProfile.public', 'UserProfile Zveřejnit mé jméno v seznamu podporovatelů: BooleanField '), ('UserProfile.sex', "UserProfile Pohlaví: CharField ('male', 'female', 'unknown')"), ('UserProfile.street', 'UserProfile Ulice a číslo domu (č.p./č.o.): CharField '), ('UserProfile.telephone', 'UserProfile Telefon: CharField '), ('UserProfile.title_after', 'UserProfile Titul za jménem: CharField '), ('UserProfile.title_before', 'UserProfile Titul před jménem: CharField '), ('UserProfile.updated', 'UserProfile Datum poslední změny: DateTimeField '), ('UserProfile.username', 'UserProfile uživatelské jméno: CharField '), ('UserProfile.zip_code', 'UserProfile PSČ: TextField '), ('action', "Akce: CharField ('daily', 'new-user', 'new-payment')")], help_text='Value or variable on left-hand side', max_length=50, null=True, verbose_name='Variable')),
                ('operation', models.CharField(choices=[('=', '='), ('!=', '≠'), ('>', '>'), ('<', '<'), ('>=', '≤'), ('<=', '≤'), ('containts', 'contains'), ('icontaints', 'contains (case insensitive)')], max_length=30, verbose_name='Operation')),
                ('value', models.CharField(blank=True, help_text='Value or variable on right-hand side. <br/>\naction: daily, new-user<br/>\nDateField: month_ago, one_day, one_week, two_weeks, one_month<br/>\nBooleanField: True, False', max_length=50, null=True, verbose_name='Value')),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aklub.Condition')),
            ],
            options={
                'verbose_name': 'Terminal condition',
                'verbose_name_plural': 'Terminal conditions',
            },
        ),
        migrations.CreateModel(
            name='UserInCampaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('knows_us_from', models.CharField(blank=True, max_length=80, verbose_name='Where does he/she know us from?')),
                ('why_supports', models.TextField(blank=True, max_length=500, verbose_name='Why does he/she support us?')),
                ('field_of_work', models.CharField(blank=True, help_text='His/her area of expertise and/or interest', max_length=80, verbose_name='Field of work')),
                ('additional_information', models.TextField(blank=True, max_length=500, verbose_name='Additional information')),
                ('variable_symbol', models.CharField(default='', max_length=30, unique=True, verbose_name='Variable symbol')),
                ('registered_support', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='When did this user register to support us', verbose_name='Registered support')),
                ('exceptional_membership', models.BooleanField(default=False, help_text='In special cases, people can become members of the club even if they do not pay any money. This should be justified in the note.', verbose_name='Exceptional membership')),
                ('regular_payments', models.CharField(choices=[('regular', 'Regular payments'), ('onetime', 'No regular payments'), ('promise', 'Promise of regular payments')], help_text='Is this user registered for regular payments?', max_length=20, verbose_name='Regular payments')),
                ('old_account', models.BooleanField(default=False, help_text='User has old account', verbose_name='Old account')),
                ('regular_amount', models.PositiveIntegerField(blank=True, help_text='Minimum yearly payment is 1800 Kč', null=True, verbose_name='Regularly (amount)')),
                ('regular_frequency', models.CharField(blank=True, choices=[('monthly', 'Monthly'), ('quaterly', 'Quaterly'), ('biannually', 'Bianually'), ('annually', 'Anually'), (None, 'Onetime')], max_length=20, null=True, verbose_name='Frequency of regular payments')),
                ('expected_date_of_first_payment', models.DateField(blank=True, help_text='When should the first payment arrive on our account', null=True, verbose_name='Expected date of first payment')),
                ('other_support', models.TextField(blank=True, help_text='If the user supports us in other ways, please specify here.', max_length=500, verbose_name='Other support')),
                ('note', models.TextField(blank=True, max_length=2000, verbose_name='Note for making a boring form more lively')),
                ('verified', models.BooleanField(default=False, help_text='Was the the user information verified by a club administrator?', verbose_name='Verified')),
                ('activity_points', models.IntegerField(default=0, help_text='Points for users activity', verbose_name='Activity points')),
                ('updated', models.DateTimeField(auto_now=True, null=True, verbose_name='Date of last change')),
                ('wished_tax_confirmation', models.BooleanField(default=True, verbose_name='Send tax confirmation')),
                ('wished_welcome_letter', models.BooleanField(default=True, verbose_name='Send welcome letter')),
                ('wished_information', models.BooleanField(default=True, verbose_name='Send regular news via email')),
                ('end_of_regular_payments', models.DateField(blank=True, null=True, verbose_name='End of regular payments (for payments by card)')),
                ('next_communication_date', models.DateField(blank=True, null=True, verbose_name='Date of next communication')),
                ('next_communication_method', models.CharField(blank=True, choices=[('email', 'Email'), ('phonecall', 'Phonecall'), ('mail', 'Mail'), ('personal', 'Personal'), ('internal', 'Internal')], max_length=30, null=True, verbose_name='Method of next communication')),
                ('number_of_payments', models.IntegerField(editable=False, null=True)),
                ('expected_regular_payment_date', models.DateField(editable=False, null=True)),
                ('extra_money', models.IntegerField(editable=False, null=True)),
                ('payment_total', models.FloatField(editable=False, null=True)),
                ('no_upgrade', models.NullBooleanField(editable=False)),
                ('campaign', models.ForeignKey(default=None, help_text='Campaign', on_delete=django.db.models.deletion.CASCADE, to='aklub.Campaign')),
                ('last_payment', models.ForeignKey(default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_last_payment', to='aklub.Payment')),
                ('recruiter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='aklub.Recruiter')),
                ('source', models.ForeignKey(blank=True, default=None, help_text='How did he contact us / became a member? In direct dialog, please distinguish between partial form (he still needs to send a permanent order into his bank) and full form (we are going to submit his form directly into bank, no further action is needed from him).', max_length=80, null=True, on_delete=django.db.models.deletion.SET_NULL, to='aklub.Source', verbose_name='Source')),
                ('userprofile', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_users', to=settings.AUTH_USER_MODEL, verbose_name='Verified by')),
            ],
            options={
                'ordering': ['userprofile__last_name', 'userprofile__first_name'],
                'verbose_name': 'User in campaign',
                'verbose_name_plural': 'Users in campaign',
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='aklub.UserInCampaign'),
        ),
        migrations.AddField(
            model_name='masscommunication',
            name='send_to_users',
            field=models.ManyToManyField(blank=True, help_text='All users who should receive the communication', to='aklub.UserInCampaign', verbose_name='send to users'),
        ),
        migrations.AddField(
            model_name='communication',
            name='result',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='aklub.Result', verbose_name='Result of communication'),
        ),
        migrations.AddField(
            model_name='communication',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communications', to='aklub.UserInCampaign'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='result',
            field=models.ManyToManyField(blank=True, to='aklub.Result', verbose_name='Acceptable results of communication'),
        ),
        migrations.AddField(
            model_name='automaticcommunication',
            name='condition',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='aklub.Condition'),
        ),
        migrations.AddField(
            model_name='automaticcommunication',
            name='sent_to_users',
            field=models.ManyToManyField(blank=True, help_text='List of users to whom this communication was already sent', to='aklub.UserInCampaign'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='campaigns',
            field=models.ManyToManyField(blank=True, help_text='Associated campaigns', to='aklub.Campaign'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='NewUser',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name': 'new user',
                'verbose_name_plural': 'new users',
            },
            bases=('aklub.userincampaign',),
        ),
        migrations.CreateModel(
            name='UserYearPayments',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name': 'Payment for users in time period',
                'verbose_name_plural': 'Payments for users in time periods',
            },
            bases=('aklub.userincampaign',),
        ),
        migrations.AlterUniqueTogether(
            name='userincampaign',
            unique_together=set([('userprofile', 'campaign')]),
        ),
        migrations.AlterUniqueTogether(
            name='taxconfirmation',
            unique_together=set([('user_profile', 'year')]),
        ),
    ]
