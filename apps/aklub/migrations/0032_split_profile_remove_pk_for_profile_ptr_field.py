# Generated by Django 2.2.3 on 2019-07-29 18:29
# check the 'Manual intervention' comment
import aklub.models
from  django.contrib.contenttypes.models import ContentType
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import stdimage.models

from django.db import connection

ONETOONE_USER_PROFILE_MODEL_DATA = []
USER_PROFILE_MODEL_DATA = []

def get_user_model_data(apps, schema_editor):
    """Copy exist user model data before change model name/structure
    old model UserProfile -> new model Profile
    """
    user_profile_model = apps.get_model('aklub', 'UserProfile')
    global USER_PROFILE_MODEL_DATA
    global SPECIFIC_USER_PROFILE_DATA
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM aklub_userprofile")
        content_type_id = ContentType.objects.get(model=user_profile_model._meta.model_name).id        
        rows = [list(row) + [content_type_id] for row in cursor.fetchall()]
        columns = [col[0] for col in cursor.description]
        columns.append('polymorphic_ctype_id')
        USER_PROFILE_MODEL_DATA = [
            dict(zip(columns, row)) for row in rows
        ]
        for user in USER_PROFILE_MODEL_DATA:
            ONETOONE_USER_PROFILE_MODEL_DATA.append(
                {
                    'user_id': user['id'],
                    'sex': user.pop('sex'),

                }
            )

def set_user_model_data(apps, schema_editor):
    """Fullfill new model Profile with old UserProfile model data"""
    profile_model = apps.get_model('aklub', 'Profile')
    user_profile_model = apps.get_model('aklub', 'UserProfile')
    for user in USER_PROFILE_MODEL_DATA:
        
        new_model = profile_model(**user)
        new_model.save()
    # Handle OneToOne relationship
    with connection.cursor() as cursor:
        for extend_user_data in ONETOONE_USER_PROFILE_MODEL_DATA:
            cursor.execute("INSERT INTO aklub_userprofile (profile_ptr_id, sex) VALUES(%s, %s)",
                           [extend_user_data['user_id'], extend_user_data['sex']])
    
class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0013_auto_20190729_1653'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('aklub', '0031_accountstatements_administrative_unit'),
    ]

    operations = [
        migrations.RunPython(get_user_model_data),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='password')),
                ('title_after', models.CharField(blank=True, max_length=15, verbose_name='Title after name')),
                ('title_before', models.CharField(blank=True, max_length=15, verbose_name='Title before name')),
                ('addressment', models.CharField(blank=True, max_length=40, verbose_name='Addressment in letter')),
                ('addressment_on_envelope', models.CharField(blank=True, max_length=40, verbose_name='Addressment on envelope')),
                ('language', models.CharField(choices=[('cs', 'Czech'), ('en', 'English')], default='cs', help_text='This is the language which will be used to communicate with this user. The system will send emails in this language and administrators will use this language in phone calls and personal contacts.', max_length=50, verbose_name='Language')),
                ('street', models.CharField(blank=True, max_length=80, verbose_name='Street and number')),
                ('city', models.CharField(blank=True, max_length=40, verbose_name='City/City part')),
                ('country', models.CharField(blank=True, default='Česká republika', max_length=40, verbose_name='Country')),
                ('zip_code', models.CharField(blank=True, max_length=30, verbose_name='ZIP Code')),
                ('different_correspondence_address', models.BooleanField(default=False, help_text='User has different correspondence address', verbose_name='Different correspondence address')),
                ('other_support', models.TextField(blank=True, help_text='If the user supports us in other ways, please specify here.', max_length=500, verbose_name='Other support')),
                ('public', models.BooleanField(default=True, verbose_name='Publish my name in the list of supporters')),
                ('profile_text', models.TextField(blank=True, help_text='Tell others why you support Auto*Mat', max_length=3000, null=True, verbose_name='What is your reason?')),
                ('profile_picture', stdimage.models.StdImageField(blank=True, help_text='Your profile picture, which others will see.', null=True, upload_to='profile-images', verbose_name='Profile picture')),
                ('club_card_available', models.BooleanField(default=False, help_text='Is he entitled to posses a club card?', verbose_name='Club card available')),
                ('club_card_dispatched', models.BooleanField(default=False, help_text='Did we send him the club card already?', verbose_name='Club card dispatched?')),
                ('other_benefits', models.TextField(blank=True, help_text='Did he receive some other benefits?', max_length=500, verbose_name='Other benefits')),
                ('note', models.TextField(blank=True, max_length=2000, verbose_name='Note for making a boring form more lively')),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date of creation')),
                ('updated', models.DateTimeField(auto_now=True, null=True, verbose_name='Date of last change')),
                ('send_mailing_lists', models.BooleanField(default=True, verbose_name='Sending of mailing lists allowed')),
                ('age_group', models.PositiveIntegerField(blank=True, choices=[(2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990), (1989, 1989), (1988, 1988), (1987, 1987), (1986, 1986), (1985, 1985), (1984, 1984), (1983, 1983), (1982, 1982), (1981, 1981), (1980, 1980), (1979, 1979), (1978, 1978), (1977, 1977), (1976, 1976), (1975, 1975), (1974, 1974), (1973, 1973), (1972, 1972), (1971, 1971), (1970, 1970), (1969, 1969), (1968, 1968), (1967, 1967), (1966, 1966), (1965, 1965), (1964, 1964), (1963, 1963), (1962, 1962), (1961, 1961), (1960, 1960), (1959, 1959), (1958, 1958), (1957, 1957), (1956, 1956), (1955, 1955), (1954, 1954), (1953, 1953), (1952, 1952), (1951, 1951), (1950, 1950), (1949, 1949), (1948, 1948), (1947, 1947), (1946, 1946), (1945, 1945), (1944, 1944), (1943, 1943), (1942, 1942), (1941, 1941), (1940, 1940), (1939, 1939), (1938, 1938), (1937, 1937), (1936, 1936), (1935, 1935), (1934, 1934), (1933, 1933), (1932, 1932), (1931, 1931), (1930, 1930), (1929, 1929), (1928, 1928), (1927, 1927), (1926, 1926), (1925, 1925), (1924, 1924), (1923, 1923), (1922, 1922), (1921, 1921), (1920, 1920)], null=True, verbose_name='Birth year')),
                ('birth_month', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True, verbose_name='Month of birth')),
                ('birth_day', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], null=True, verbose_name='Day of birth')),
                ('newsletter_on', models.NullBooleanField(default=False, verbose_name='newsletter_on')),
                ('call_on', models.NullBooleanField(default=False, verbose_name='call_on')),
                ('challenge_on', models.NullBooleanField(default=False, verbose_name='challenge_on')),
                ('letter_on', models.NullBooleanField(default=False, verbose_name='letter_on')),
                ('administrated_units', models.ManyToManyField(blank=True, related_name='administrators', to='aklub.AdministrativeUnit', verbose_name='administrated units')),
                ('administrative_units', models.ManyToManyField(blank=True, to='aklub.AdministrativeUnit', verbose_name='administrative units')),
                ('campaigns', models.ManyToManyField(blank=True, help_text='Associated campaigns', to='aklub.Event')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_aklub.profile_set+', to='contenttypes.ContentType')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User profile',
                'verbose_name_plural': 'User profiles',
                'permissions': (('can_edit_all_units', 'Může editovat všechno ve všech administrativních jednotkách'),),
            },
            managers=[
                ('objects', aklub.models.CustomUserManager()),
            ],
        ),
        migrations.AlterModelOptions(
            name='userprofile',
            options={'verbose_name': 'User profile', 'verbose_name_plural': 'User profiles'},
        ),
        migrations.AlterModelManagers(
            name='userprofile',
            managers=[
                ('objects', aklub.models.CustomUserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='addressment',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='addressment_on_envelope',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='administrated_units',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='administrative_units',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='age_group',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='birth_day',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='birth_month',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='call_on',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='campaigns',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='challenge_on',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='city',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='club_card_available',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='club_card_dispatched',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='country',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='created',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='date_joined',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='different_correspondence_address',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='email',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='first_name',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='id',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='is_staff',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='is_superuser',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='language',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='last_login',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='last_name',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='letter_on',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='newsletter_on',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='note',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='other_benefits',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='other_support',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='password',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='profile_picture',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='profile_text',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='public',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='send_mailing_lists',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='street',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='title_after',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='title_before',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='updated',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='user_permissions',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='username',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='zip_code',
        ),
        migrations.AlterField(
            model_name='terminalcondition',
            name='variable',
            field=models.CharField(blank=True, choices=[('User.date_joined', 'User datum registrace: DateTimeField '), ('User.email', 'User e-mailová adresa: CharField '), ('User.first_name', 'User křestní jméno: CharField '), ('User.id', 'User ID: AutoField '), ('User.is_active', 'User aktivní: BooleanField '), ('User.is_staff', 'User administrační přístup: BooleanField '), ('User.is_superuser', 'User superuživatel: BooleanField '), ('User.last_login', 'User poslední přihlášení: DateTimeField '), ('User.last_name', 'User příjmení: CharField '), ('User.password', 'User heslo: CharField '), ('User.username', 'User uživatelské jméno: CharField '), ('User.last_payment.BIC', 'User.last_payment BIC: CharField '), ('User.last_payment.KS', 'User.last_payment KS: CharField '), ('User.last_payment.SS', 'User.last_payment SS: CharField '), ('User.last_payment.VS', 'User.last_payment VS 1: CharField '), ('User.last_payment.VS2', 'User.last_payment VS 2: CharField '), ('User.last_payment.account', 'User.last_payment Account: CharField '), ('User.last_payment.account_name', 'User.last_payment Jméno účtu: CharField '), ('User.last_payment.account_statement', 'User.last_payment account statement: ForeignKey '), ('User.last_payment.amount', 'User.last_payment Částka: PositiveIntegerField '), ('User.last_payment.bank_code', 'User.last_payment Kód banky: CharField '), ('User.last_payment.bank_name', 'User.last_payment Jméno banky: CharField '), ('User.last_payment.created', 'User.last_payment Datum vytvoření: DateTimeField '), ('User.last_payment.currency', 'User.last_payment Měna: CharField '), ('User.last_payment.date', 'User.last_payment Datum platby: DateField '), ('User.last_payment.done_by', 'User.last_payment Provedl: CharField '), ('User.last_payment.id', 'User.last_payment ID: AutoField '), ('User.last_payment.operation_id', 'User.last_payment ID Operace: CharField '), ('User.last_payment.order_id', 'User.last_payment ID objednávky: CharField '), ('User.last_payment.recipient_message', 'User.last_payment Zpráva pro recipienta: CharField '), ('User.last_payment.specification', 'User.last_payment Specifikace: CharField '), ('User.last_payment.transfer_note', 'User.last_payment Poznámka k převodu: CharField '), ('User.last_payment.transfer_type', 'User.last_payment Typ převodu: CharField '), ('User.last_payment.type', "User.last_payment Typ: CharField ('bank-transfer', 'cash', 'expected', 'darujme')"), ('User.last_payment.updated', 'User.last_payment Datum poslední změny: DateTimeField '), ('User.last_payment.user_donor_payment_channel', 'User.last_payment user donor payment channel: ForeignKey '), ('User.last_payment.user_identification', 'User.last_payment Identifikace odesílatele: CharField '), ('User.source.direct_dialogue', 'User.source Pochází z Direct dialogu: BooleanField '), ('User.source.id', 'User.source ID: AutoField '), ('User.source.name', 'User.source Jméno: CharField '), ('User.source.slug', 'User.source Identifikátor: SlugField '), ('UserInCampaign.activity_points', 'UserInCampaign Body za aktivitu: IntegerField '), ('UserInCampaign.additional_information', 'UserInCampaign Rozšiřující informace: TextField '), ('UserInCampaign.campaign', 'UserInCampaign campaign: ForeignKey '), ('UserInCampaign.created', 'UserInCampaign Datum vytvoření: DateTimeField '), ('UserInCampaign.email_confirmed', 'UserInCampaign Je potvrzeno e-mailem: BooleanField '), ('UserInCampaign.exceptional_membership', 'UserInCampaign Výjimečné členství: BooleanField '), ('UserInCampaign.expected_date_of_first_payment', 'UserInCampaign Očekávané datum první platby: DateField '), ('UserInCampaign.field_of_work', 'UserInCampaign Pracovní oblast: CharField '), ('UserInCampaign.gdpr_consent', 'UserInCampaign GDPR consent: BooleanField '), ('UserInCampaign.id', 'UserInCampaign ID: AutoField '), ('UserInCampaign.knows_us_from', 'UserInCampaign Odkud nás zná?: CharField '), ('UserInCampaign.next_communication_date', 'UserInCampaign Datum příští komunikace komunikace: DateField '), ('UserInCampaign.next_communication_method', "UserInCampaign Metoda příští komunikace: CharField ('email', 'phonecall', 'mail', 'personal', 'internal')"), ('UserInCampaign.note', 'UserInCampaign Poznámka pro oživení nudného formuláře: TextField '), ('UserInCampaign.old_account', 'UserInCampaign Starý účet: BooleanField '), ('UserInCampaign.other_support', 'UserInCampaign Jiná podpora: TextField '), ('UserInCampaign.public', 'UserInCampaign Zveřejnit mé jméno v seznamu podporovatelů/petentů této kampaně: BooleanField '), ('UserInCampaign.recruiter', 'UserInCampaign recruiter: ForeignKey '), ('UserInCampaign.registered_support', 'UserInCampaign Registrace podpory: DateTimeField '), ('UserInCampaign.regular_amount', 'UserInCampaign Částka pravidelné platby: PositiveIntegerField '), ('UserInCampaign.regular_frequency', "UserInCampaign Frekvence pravidelných plateb: CharField ('monthly', 'quaterly', 'biannually', 'annually', None)"), ('UserInCampaign.regular_payments', "UserInCampaign Pravidelné platby: CharField ('regular', 'onetime', 'promise')"), ('UserInCampaign.source', 'UserInCampaign Zdroj: ForeignKey '), ('UserInCampaign.updated', 'UserInCampaign Datum poslední změny: DateTimeField '), ('UserInCampaign.userprofile', 'UserInCampaign userprofile: ForeignKey '), ('UserInCampaign.variable_symbol', 'UserInCampaign Variabilní symbol: CharField '), ('UserInCampaign.verified', 'UserInCampaign Ověřen: BooleanField '), ('UserInCampaign.verified_by', 'UserInCampaign Ověřil: ForeignKey '), ('UserInCampaign.why_supports', 'UserInCampaign Proč nás podporuje?: TextField '), ('UserInCampaign.wished_information', 'UserInCampaign Zasílat pravidelné informace emailem: BooleanField '), ('UserInCampaign.wished_tax_confirmation', 'UserInCampaign Zaslat daňové potvrzení (na konci roku): BooleanField '), ('UserInCampaign.wished_welcome_letter', 'UserInCampaign Odeslat uvítací dopis s členskou kartou: BooleanField '), ('UserProfile.addressment', 'UserProfile Oslovení v dopise: CharField '), ('UserProfile.addressment_on_envelope', 'UserProfile Oslovení na obálku: CharField '), ('UserProfile.age_group', 'UserProfile Ročník narození: PositiveIntegerField (2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002, 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959, 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920)'), ('UserProfile.birth_day', 'UserProfile Day of birth: PositiveIntegerField (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)'), ('UserProfile.birth_month', 'UserProfile Month of birth: PositiveIntegerField (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)'), ('UserProfile.call_on', 'UserProfile call_on: NullBooleanField '), ('UserProfile.challenge_on', 'UserProfile challenge_on: NullBooleanField '), ('UserProfile.city', 'UserProfile Město/Městská část: CharField '), ('UserProfile.club_card_available', 'UserProfile Nárok na klubovou kartu: BooleanField '), ('UserProfile.club_card_dispatched', 'UserProfile Klubová karta odeslána?: BooleanField '), ('UserProfile.country', 'UserProfile Země: CharField '), ('UserProfile.created', 'UserProfile Datum vytvoření: DateTimeField '), ('UserProfile.date_joined', 'UserProfile datum registrace: DateTimeField '), ('UserProfile.different_correspondence_address', 'UserProfile Jiná korespondenční adresa: BooleanField '), ('UserProfile.email', 'UserProfile e-mailová adresa: CharField '), ('UserProfile.first_name', 'UserProfile křestní jméno: CharField '), ('UserProfile.id', 'UserProfile ID: AutoField '), ('UserProfile.is_active', 'UserProfile aktivní: BooleanField '), ('UserProfile.is_staff', 'UserProfile administrační přístup: BooleanField '), ('UserProfile.is_superuser', 'UserProfile superuživatel: BooleanField '), ('UserProfile.language', "UserProfile Jazyk: CharField ('cs', 'en')"), ('UserProfile.last_login', 'UserProfile poslední přihlášení: DateTimeField '), ('UserProfile.last_name', 'UserProfile příjmení: CharField '), ('UserProfile.letter_on', 'UserProfile letter_on: NullBooleanField '), ('UserProfile.newsletter_on', 'UserProfile newsletter_on: NullBooleanField '), ('UserProfile.note', 'UserProfile Poznámka pro oživení nudného formuláře: TextField '), ('UserProfile.other_benefits', 'UserProfile Další benefity: TextField '), ('UserProfile.other_support', 'UserProfile Jiná podpora: TextField '), ('UserProfile.password', 'UserProfile heslo: CharField '), ('UserProfile.polymorphic_ctype', 'UserProfile polymorphic ctype: ForeignKey '), ('UserProfile.profile_picture', 'UserProfile Profilová fotografie: FileField '), ('UserProfile.profile_ptr', 'UserProfile profile ptr: OneToOneField '), ('UserProfile.profile_text', 'UserProfile A jaký je Tvůj důvod?: TextField '), ('UserProfile.public', 'UserProfile Zveřejnit mé jméno v seznamu podporovatelů: BooleanField '), ('UserProfile.send_mailing_lists', 'UserProfile Povolit odesílání mailing listů: BooleanField '), ('UserProfile.sex', "UserProfile Pohlaví: CharField ('male', 'female', 'unknown')"), ('UserProfile.street', 'UserProfile Ulice a číslo domu (č.p./č.o.): CharField '), ('UserProfile.title_after', 'UserProfile Titul za jménem: CharField '), ('UserProfile.title_before', 'UserProfile Titul před jménem: CharField '), ('UserProfile.updated', 'UserProfile Datum poslední změny: DateTimeField '), ('UserProfile.username', 'UserProfile uživatelské jméno: CharField '), ('UserProfile.zip_code', 'UserProfile PSČ: CharField '), ('action', "Akce: CharField ('daily', 'new-user', 'new-payment')")], help_text='Value or variable on left-hand side', max_length=50, null=True, verbose_name='Variable'),
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('profile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='aklub.Profile')),
                ('crn', models.IntegerField(validators=[django.core.validators.MaxValueValidator(99999999)], verbose_name='Company Registration Number')),
            ],
            options={
                'verbose_name': 'Company profile',
                'verbose_name_plural': 'Company profiles',
            },
            bases=('aklub.profile',),
            managers=[
                ('objects', aklub.models.CustomUserManager()),
            ],
        ),
        # Manual intervention
        # Manual fix according https://docs.djangoproject.com/en/2.2/howto/writing-migrations/#migrations-that-add-unique-fields
        migrations.AddField(
            model_name='userprofile',
            name='profile_ptr',
            field=models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, null=True, serialize=False, to='aklub.Profile'), # remove primary_key=True, add null=True
            preserve_default=True,
        ),
        migrations.RunSQL("DELETE FROM aklub_userprofile;"),
        migrations.RunPython(set_user_model_data, reverse_code=migrations.RunPython.noop)
    ]
